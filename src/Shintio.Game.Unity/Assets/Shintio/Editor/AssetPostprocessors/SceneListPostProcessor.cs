using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Shintio.Editor.Utils;
using UnityEditor;
using UnityEngine;

namespace Shintio.Editor.AssetPostprocessors
{
	public class SceneListPostProcessor : AssetPostprocessor
	{
		private const string TagManagerPath = "ProjectSettings/EditorBuildSettings.asset";
		private const string FilePath = "Assets/Shintio/GeneratedCode/SceneList.Generated.cs";

		private static void OnPostprocessAllAssets(
			string[] importedAssets,
			string[] deletedAssets,
			string[] movedAssets,
			string[] movedFromAssetPaths
		)
		{
			var asset = importedAssets.FirstOrDefault(a => a == TagManagerPath);
			if (asset == null)
			{
				return;
			}

			GenerateCode(asset);
		}

		private static void GenerateCode(string assetPath)
		{
			var asset = AssetDatabase.LoadAllAssetsAtPath(assetPath);
			if (asset == null || asset.Length == 0)
			{
				Debug.LogError($"[{nameof(TagManagerPostProcessor)}] Error loading {assetPath}");
				return;
			}

			var so = new SerializedObject(asset[0]);

			var scenes = so.FindProperty("m_Scenes");
			if (scenes == null)
			{
				Debug.LogError($"[{nameof(TagManagerPostProcessor)}] Failed to process {assetPath}");
				return;
			}

			var directoryPath = Path.GetDirectoryName(FilePath)!;
			if (!Directory.Exists(directoryPath))
			{
				Directory.CreateDirectory(directoryPath);
			}

			var result = new StringBuilder();

			result.AppendLine(CodeGeneration.AutoGeneratedComment);
			
			result.AppendLine("namespace Shintio.Unity");
			result.AppendLine("{");
			
			result.AppendLine("\tpublic static class Scenes");
			result.AppendLine("\t{");

			var all = new List<string>();
			for (var i = 0; i < scenes.arraySize; i++)
			{
				var scene = scenes.GetArrayElementAtIndex(i);
				if (scene == null)
				{
					continue;
				}
				
				var enabled = scene.FindPropertyRelative("enabled").boolValue;
				var path = scene.FindPropertyRelative("path").stringValue;
				var name = Path.GetFileNameWithoutExtension(path);
				
				result.AppendLine($"\t\tpublic static readonly SceneInfo {name} = new SceneInfo({i}, \"{name}\", {(enabled ? "true" : "false")});");
				
				all.Add(name);
			}
			
			result.AppendLine($"\t\tpublic static readonly SceneInfo[] All = {{ {string.Join(", ", all)} }};");
			result.AppendLine("\t\tpublic class SceneInfo");
			result.AppendLine("\t\t{");
			result.AppendLine("\t\t\tpublic readonly int Id;");
			result.AppendLine("\t\t\tpublic readonly string Name;");
			result.AppendLine("\t\t\tpublic readonly bool Enabled;");
			result.AppendLine("\t\t\t");
			result.AppendLine("\t\t\tpublic SceneInfo(int id, string name, bool enabled)");
			result.AppendLine("\t\t\t{");
			result.AppendLine("\t\t\t\tId = id;");
			result.AppendLine("\t\t\t\tName = name;");
			result.AppendLine("\t\t\t\tEnabled = enabled;");
			result.AppendLine("\t\t\t}");
			result.AppendLine("\t\t}");
			result.AppendLine("\t}");
			
			result.AppendLine("}");
			
			File.WriteAllText(FilePath, result.ToString());
			
			AssetDatabase.Refresh();
		}
	}
}