using System.IO;
using System.Linq;
using System.Text;
using Shintio.Editor.Utils;
using UnityEditor;
using UnityEngine;

namespace Shintio.Editor.AssetPostprocessors
{
	public class TagManagerPostProcessor : AssetPostprocessor
	{
		private const string TagManagerPath = "ProjectSettings/TagManager.asset";
		private const string FilePath = "Assets/Shintio/GeneratedCode/TagManagerData.Generated.cs";

		private static readonly string[] DefaultTags =
			{ "Untagged", "Respawn", "Finish", "EditorOnly", "MainCamera", "Player", "GameController" };

		private static void OnPostprocessAllAssets(
			string[] importedAssets,
			string[] deletedAssets,
			string[] movedAssets,
			string[] movedFromAssetPaths
		)
		{
			var asset = importedAssets.FirstOrDefault(a => a == TagManagerPath);
			if (asset == null)
			{
				return;
			}

			GenerateCode(asset);
		}

		private static void GenerateCode(string assetPath)
		{
			var asset = AssetDatabase.LoadAllAssetsAtPath(assetPath);
			if (asset == null || asset.Length == 0)
			{
				Debug.LogError($"[{nameof(TagManagerPostProcessor)}] Error loading {assetPath}");
				return;
			}

			var so = new SerializedObject(asset[0]);

			var tags = so.FindProperty("tags");
			var layers = so.FindProperty("layers");
			// var sortingLayers = so.FindProperty("m_SortingLayers");
			// var renderingLayers = so.FindProperty("m_RenderingLayers");

			if (tags == null || layers == null)
			{
				Debug.LogError($"[{nameof(TagManagerPostProcessor)}] Failed to process {assetPath}");
				return;
			}

			var directoryPath = Path.GetDirectoryName(FilePath)!;
			if (!Directory.Exists(directoryPath))
			{
				Directory.CreateDirectory(directoryPath);
			}

			var result = new StringBuilder();

			result.AppendLine(CodeGeneration.AutoGeneratedComment);
			
			result.AppendLine("namespace Shintio.Unity");
			result.AppendLine("{");

			#region Tags
			
			result.AppendLine("\tpublic static class Tags");
			result.AppendLine("\t{");

			var allTags = DefaultTags.ToList();
			for (var i = 0; i < tags.arraySize; i++)
			{
				var tag = tags.GetArrayElementAtIndex(i).stringValue;
				if (!string.IsNullOrEmpty(tag))
				{
					allTags.Add(tag);
				}
			}

			foreach (var tag in allTags)
			{
				result.AppendLine($"\t\tpublic const string {tag.Replace(" ", "_")} = \"{tag}\";");
			}
			
			result.AppendLine("\t}");
			
			#endregion

			#region Layers
			
			result.AppendLine("\tpublic static class Layers");
			result.AppendLine("\t{");
			
			for (var i = 0; i < layers.arraySize; i++)
			{
				var layer = layers.GetArrayElementAtIndex(i).stringValue;
				if (!string.IsNullOrEmpty(layer))
				{
					result.AppendLine($"\t\tpublic const int {layer.Replace(" ", "_")} = {i};");
				}
			}
			
			result.AppendLine("\t}");
			
			#endregion
			
			result.AppendLine("}");
			
			File.WriteAllText(FilePath, result.ToString());
			
			AssetDatabase.Refresh();
		}
	}
}